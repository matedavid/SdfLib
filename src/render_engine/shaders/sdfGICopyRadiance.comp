#version 430 core

layout (local_size_x = 64) in;

uniform bool reset;
uniform int leafIndicesSize;

uint OCTREENODE_LEAF_MASK     = 0xC0000000; // 0x80000000;
uint OCTREENODE_CHILDREN_MASK = 0x3FFFFFFF; // 0x7FFFFFFF;

struct OctreeNode 
{
    // 32 bits
    // - bit 31,30:   node type
    // - bit 29-0:    children idx
    uint data;

    vec3 bboxMin;
    vec3 bboxMax;

    vec4 color;
    // roughness, metallic, -, -
    vec4 material;

    // radiance caching
    vec4 readRadiance[6];
    vec4 writeRadiance[6];
};

#define NODE_GREY  0
#define NODE_BLACK 1
#define NODE_WHITE 2

bool nodeIsBlack(uint data)
{
    return ((data & OCTREENODE_LEAF_MASK) >> 30) == NODE_BLACK;
}

bool nodeIsWhite(uint data)
{
    return ((data & OCTREENODE_LEAF_MASK) >> 30) == NODE_WHITE;
}

bool nodeIsLeaf(uint data)
{
    return nodeIsBlack(data) || nodeIsWhite(data);
}

layout(std140, binding = 4) buffer SceneOctree 
{
    OctreeNode sceneData[];
};

layout (std140, binding = 5) buffer SceneOctreeLeafIndices
{
    uint sceneLeafIndices[];
};

void main() 
{
    uint idx = gl_GlobalInvocationID.x;
    if (idx >= leafIndicesSize)
        return;

    if (!nodeIsLeaf(sceneData[idx].data))
        return;

    for (int i = 0; i < 6; ++i) 
    {
        if (reset)
        {
            sceneData[idx].readRadiance[i]  = vec4(0.0);
            sceneData[idx].writeRadiance[i] = vec4(0.0);
        }
        else
        {
            sceneData[idx].readRadiance[i] = sceneData[idx].writeRadiance[i];
        }
    }
}

// void main() 
// {
//     uint idx = gl_GlobalInvocationID.x;
//     if (idx >= leafIndicesSize)
//         return;

//     uint leafIdx = sceneLeafIndices[idx];
//     if (!bool(sceneData[leafIdx].data & OCTREENODE_LEAF_MASK))
//         return;

//     sceneData[leafIdx].readRadiance = sceneData[leafIdx].writeRadiance;

//     if (reset) 
//     {
//         sceneData[leafIdx].readRadiance = vec4(0.0);
//         sceneData[leafIdx].writeRadiance = vec4(0.0);
//     }
// }